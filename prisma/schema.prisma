// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    role          Role    @default(USER)
    organizations  Organization[] @relation("OrganizationOwner")
    managedOrganizations Organization[] @relation("OrganizationManager")
    organizationId String? 
}

enum Role {
    OWNER
    MANAGER
    USER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Organization {
    id         String   @id @default(cuid())
    name       String
    ownerId    String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    owner      User     @relation("OrganizationOwner", fields: [ownerId], references: [id])
    managers    User[]   @relation("OrganizationManager")

    inviteLinks InviteLink[] 
    cashFlows   CashFlow[]  // Relation to CashFlow
    expenses    Expenses[]   // Relation to Expenses
    revenue     Revenue[]    // Relation to Revenue
    profit      Profit[]     // Relation to Profit
    budget      Budget[]     // Relation to Budget
    debt        Debt[]       // Relation to Debt
    investments  Investments[] // Relation to Investments
    funding     Funding[]     // Relation to Funding
    reports     FinancialReports[] // Relation to FinancialReports
    assetsLiabilities AssetsLiabilities[] // Relation to AssetsLiabilities
}

model InviteLink {
    id            String   @id @default(cuid())
    organizationId String
    email         String
    token         String   @unique
    createdAt     DateTime @default(now())
    expires       DateTime

    organization  Organization @relation(fields: [organizationId], references: [id])
}


model CashFlow {
    id             Int      @id @default(autoincrement())
    date           DateTime
    cash_inflow    Float
    cash_outflow   Float
    net_cash_flow  Float
    description    String?  @db.Text
    category       String?  @db.VarChar(50)
    organizationId String   // Relation to Organization
    organization   Organization @relation(fields: [organizationId], references: [id])
}

model Expenses {
    id                 Int      @id @default(autoincrement())
    date               DateTime
    amount             Float
    expense_category    String?  @db.VarChar(50)
    department         String?  @db.VarChar(50)
    description        String?  @db.Text
    organizationId     String   // Relation to Organization
    organization       Organization @relation(fields: [organizationId], references: [id])
}

model Revenue {
    id                 Int      @id @default(autoincrement())
    date               DateTime
    amount             Float
    product_line        String?  @db.VarChar(50)
    customer_type       String?  @db.VarChar(50)
    description        String?  @db.Text
    organizationId     String   // Relation to Organization
    organization       Organization @relation(fields: [organizationId], references: [id])
}

model Profit {
    id             Int      @id @default(autoincrement())
    date           DateTime
    revenue        Float
    expenses       Float
    net_profit     Float
    profit_margin   Float?   
    description    String?  @db.Text
    organizationId String   // Relation to Organization
    organization   Organization @relation(fields: [organizationId], references: [id])
}

model Budget {
    id             Int      @id @default(autoincrement())
    fiscal_year    String?  @db.VarChar(50)
    department     String?  @db.VarChar(50)
    allocated_budget Float
    spent_budget    Float
    remaining_budget Float
    description    String?  @db.Text
    organizationId String   // Relation to Organization
    organization   Organization @relation(fields: [organizationId], references: [id])
}

model Debt {
    id                  Int      @id @default(autoincrement())
    debt_type          String?  @db.VarChar(50)
    principal          Float
    interest_rate      Float?  
    maturity_date      DateTime? 
    payment_due_date   DateTime? 
    amount_paid        Float?   
    outstanding_balance Float?   
    description        String?  @db.Text
    organizationId     String   // Relation to Organization
    organization       Organization @relation(fields: [organizationId], references: [id])
}

model Investments {
    id               Int      @id @default(autoincrement())
    investment_type   String?  @db.VarChar(50)
    investment_amount Float
    investment_date   DateTime 
    returns          Float?   
    risk_level       String?  @db.VarChar(50)
    current_value    Float?   
    description      String?  @db.Text
    organizationId   String   // Relation to Organization
    organization     Organization @relation(fields: [organizationId], references: [id])
    date             DateTime
}

model Funding {
    id            Int      @id @default(autoincrement())
    funding_round  String?  @db.VarChar(50)
    amount_raised  Float
    date          DateTime
    investor_name  String?  @db.VarChar(50)
    valuation     Float?   
    description   String?  @db.Text
    organizationId String   // Relation to Organization
    organization   Organization @relation(fields: [organizationId], references: [id])
}

model FinancialReports {
    id          Int      @id @default(autoincrement())
    report_type String?  @db.VarChar(50)
    start_date  DateTime 
    end_date    DateTime 
    content     String?  @db.Text
    created_at  DateTime @default(now())
    organizationId String   // Relation to Organization
    organization   Organization @relation(fields: [organizationId], references: [id])
}

model AssetsLiabilities {
    id              Int      @id @default(autoincrement())
    asset_name      String?  @db.VarChar(50)
    asset_value     Float?   
    liability_name  String?  @db.VarChar(50)
    liability_value Float?   
    date            DateTime 
    description     String?  @db.Text
    organizationId  String   // Relation to Organization
    organization    Organization @relation(fields: [organizationId], references: [id])
}